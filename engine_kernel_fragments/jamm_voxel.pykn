jamm_voxel
6
            private int iterL = 1000 * (1 - resources->substanceTable->substances[thisVoxelCopy.substanceID].jammingFactor);
            private int iterR = iterL;
            iterL = (0 > tempX - iterL) ? tempX : iterL;
            iterR = (localConfig.simulationWidth <= tempX + iterR) ? localConfig.simulationWidth - tempX : iterR;

            for (private uint i = 0; iterL | iterR; i++){
                if (iterL){
                    if (resources->worldMap->voxels[tempX - i + (tempY - 1) * localConfig.simulationWidth].substanceID == 0){
                        resources->worldMap->voxels[tempX - i + (tempY - 1) * localConfig.simulationWidth] = resources->worldMap->voxels[tempX + tempY * localConfig.simulationWidth];
                        resources->worldMap->voxels[tempX + tempY * localConfig.simulationWidth].substanceID = 0;
                        break;
                    } else if (resources->worldMap->voxels[tempX - i + (tempY - 1) * localConfig.simulationWidth].substanceID == thisVoxelCopy.substanceID){
                        iterL--;
                    } else {
                        iterL = 0;
                    }
                }
                if (iterR){
                    if (resources->worldMap->voxels[tempX + i + (tempY - 1) * localConfig.simulationWidth].substanceID == 0){
                        resources->worldMap->voxels[tempX + i + (tempY - 1) * localConfig.simulationWidth] = resources->worldMap->voxels[tempX + tempY * localConfig.simulationWidth];
                        resources->worldMap->voxels[tempX + tempY * localConfig.simulationWidth].substanceID = 0;
                        break;
                    } else if (resources->worldMap->voxels[tempX + i + (tempY - 1) * localConfig.simulationWidth].substanceID == thisVoxelCopy.substanceID){
                        iterR--;
                    } else {
                        iterR = 0;
                    }
                }
            }
